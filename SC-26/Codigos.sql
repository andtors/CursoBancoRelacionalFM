/* CONECTAND UM BANCO */

USE EMPRESA
GO

/* CRIACAO DE TABELAS */

CREATE TABLE ALUNO(
    IDALUNO INT PRIMARY KEY IDENTITY,
    NOME VARCHAR(30) NOT NULL,
    SEXO CHAR(1) NOT NULL,
    NASCIMENTO DATE NOT NULL,
    EMAIL VARCHAR(30) UNIQUE
)
GO

/* CONSTRAINTS */

ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN ('M', 'F'))
GO

/* 1 X 1 */

CREATE TABLE ENDERECO(
    IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
    BAIRRO VARCHAR(30),
    UF CHAR(2) NOT NULL
    CHECK (UF IN('RJ', 'SP', 'MG')),
    ID_ALUNO INT UNIQUE
)
GO

/* CRIANDO A FK */

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/* COMANDOS DE DESCRICAO */

/* PROCEDURES - JÁ CRIADAS E ARMAZENADAS NO SISTEMA */

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE', 'M', '1981/12/09', 'ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA', 'F', '1978/03/09', 'ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI', 'M', '1951/07/09', 'RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO', 'M', '2002/11/09', 'JOAO@IG.COM')
GO

SELECT * FROM ALUNO
GO

/* ENDERECO */

INSERT INTO ENDERECO VALUES('FLAMENGO', 'RJ', 1)
INSERT INTO ENDERECO VALUES('MORUMBI', 'SP', 2)
INSERT INTO ENDERECO VALUES('CENTRO', 'MG', 4)
INSERT INTO ENDERECO VALUES('CENTRO', 'SP', 3)
GO

/* CRIANDO A TABELA DE TELEFONE */

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY IDENTITY,
    TIPO CHAR(3) NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    ID_ALUNO INT,
    CHECK(TIPO IN('RES', 'COM', 'CEL'))
)
GO

INSERT INTO TELEFONE VALUES('CEL', '65465184', 1)
INSERT INTO TELEFONE VALUES('RES', '35423102', 1)
INSERT INTO TELEFONE VALUES('COM', '51503213', 2)
INSERT INTO TELEFONE VALUES('CEL', '44132025', 2)
GO

SELECT * FROM ALUNOS
GO

/* PEGAR DATA ATUAL */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA */

SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A
    LEFT JOIN TELEFONE T 
    ON A.IDALUNO = T.ID_ALUNO
    INNER JOIN ENDERECO E
    ON A.IDALUNO = E.ID_ALUNO
GO

/* IFNULL */

SELECT 
    A.NOME, 
    ISNULL(T.TIPO, 'SEM') AS "TIPO",
    ISNULL(T.NUMERO, 'NUMERO') AS "TELEFONE", 
    E.BAIRRO, 
    E.UF
FROM ALUNO A
    LEFT JOIN TELEFONE T 
    ON A.IDALUNO = T.ID_ALUNO
    INNER JOIN ENDERECO E
    ON A.IDALUNO = E.ID_ALUNO
GO

/* DATAS */

SELECT * FROM ALUNO
GO

SELECT NOME, NASCIMENTO
FROM ALUNO
GO

/* DATEDIFF - CALCULA A DIFERENCA ENTRE DUAS DATAS 
FUNCAO GETDATE() TRAZ DIA E HORA
*/

SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO
GO

/* 1 PASSO */

SELECT NOME, DATEDIFF(DAY, NASCIMENTO, GETDATE())
FROM ALUNO
GO

/* 2 - PASSO */

SELECT NOME, 
DATEDIFF(DAY, NASCIMENTO, GETDATE()) AS "DIAS",
DATEDIFF(MONTH, NASCIMENTO, GETDATE()) AS "MESES",
DATEDIFF(YEAR, NASCIMENTO, GETDATE()) AS "ANOS"
FROM ALUNO
GO

SELECT NOME, DATEDIFF(DAY, NASCIMENTO, GETDATE()) IDADE
FROM ALUNO
GO

/* 3 - RETORNO INTEIRO MAIS OPERACAO MATEMATICA */

SELECT NOME, (DATEDIFF(DAY, NASCIMENTO, GETDATE()) / 365) AS 'IDADE'
FROM ALUNO
GO

SELECT NOME, (DATEDIFF(MONTH, NASCIMENTO, GETDATE()) / 12) AS 'IDADE'
FROM ALUNO
GO

SELECT NOME, 
DATEDIFF(YEAR, NASCIMENTO, GETDATE()) AS "ANOS"
FROM ALUNO
GO

/* DATENAME - TRAZ O NOME DA PARTE DA DATA EM QUESTAO - STRING */

SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO
GO

/* DATEPART - POREM O RETORNO É UM INTEIRO */

SELECT NOME, DATEPART(MONTH, NASCIMENTO), DATENAME(MONTH, NASCIMENTO)
FROM ALUNO
GO

/* DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA */

SELECT DATEADD(DAY, 365, GETDATE())

SELECT DATEADD(YEAR, 10, GETDATE())

/* CONVERSAO DE DADOS */

SELECT 1 + '1'
GO

SELECT '1' + '1'
GO

SELECT 'CURSOS DE BANCO DE DADOS' + '1'
GO

SELECT 'CURSOS DE BANCO DE DADOS' + 1
GO

/* FUNCOES DE CONVERSAO DE DADOS */

SELECT CAST('1' AS INT) +  CAST('1' AS INT)
GO 

/* CONVERSAO E CONCATENACAO */

SELECT NOME,
NASCIMENTO
FROM ALUNO
GO

SELECT NOME, 
DAY(NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, 
CONVERT(VARCHAR, DAY(NASCIMENTO)) + '/' + 
CONVERT(VARCHAR, MONTH(NASCIMENTO)) + '/' + 
CONVERT(VARCHAR, YEAR(NASCIMENTO))
FROM ALUNO
GO

/* CHARINDEX - RETORNA UM INTEIRO 
CONTAGEM DEFAULT - INICIA EM 01*/

SELECT NOME, CHARINDEX('A', NOME) AS INDICE
FROM ALUNO
GO

SELECT NOME, CHARINDEX('A', NOME, 2) AS INDICE
FROM ALUNO
GO

/* BULK INSERT - IMPORTACAO DE ARQUIVOS */

CREATE TABLE LANCAMENTO_CONTABIL(
    CONTA INT, 
    VALOR INT, 
    DEB_CRED CHAR(1)
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

-- \t = TAB

BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\Users\andre\Downloads\CONTAS.txt'
WITH 
(
    FIRSTROW = 2, 
    DATAFILETYPE = 'char',
    FIELDTERMINATOR = '\t',
    ROWTERMINATOR = '\n'
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* QUERY QUE TRAGA O NUMERO DA CONTA SALDO - DEVEDOR OU CREDOR */

SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D', DEB_CRED) AS DEBITO,
CHARINDEX('C', DEB_CRED) AS CREDITO,
CHARINDEX('C', DEB_CRED) * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C', DEB_CRED) * 2 - 1)) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
GO